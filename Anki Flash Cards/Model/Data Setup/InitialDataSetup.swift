//
//  InitialDataSetup.swift
//  Zelo Cards
//
//  Created by Lev Vlasov on 2025-06-07.
//


import CoreData
import FirebaseAnalytics

struct InitialDataSetup {
    static func setupInitialData(context: NSManagedObjectContext) {
        Analytics.logEvent("initial_data_setup_start", parameters: nil)
        let setupStartTime = Date()
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ User
        let userRequest: NSFetchRequest<User> = User.fetchRequest()
        userRequest.fetchLimit = 1

        do {
            let existingUsers = try context.fetch(userRequest)
            if existingUsers.isEmpty {
                let newUser = User(context: context)
                newUser.age = 0
                newUser.onboarding_select_language = ""
                newUser.time_study_per_day = 0
                
                print("‚úÖ User —Å–æ–∑–¥–∞–Ω")
                Analytics.logEvent("initial_data_setup_user_created", parameters: nil)
            } else {
                print("‚ÑπÔ∏è User —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ")
                Analytics.logEvent("initial_data_setup_user_already_exists", parameters: nil)
            }
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ/—Å–æ–∑–¥–∞–Ω–∏–∏ User: \(error)")
            Analytics.logEvent("initial_data_setup_user_error", parameters: [
                "error_description": error.localizedDescription
            ])
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ JSON-—Ñ–∞–π–ª–æ–≤
        guard let jsonFiles = Bundle.main.urls(forResourcesWithExtension: "json", subdirectory: nil) else {
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ JSON-—Ñ–∞–π–ª–æ–≤ –≤ –±–∞–Ω–¥–ª–µ")
            Analytics.logEvent("initial_data_setup_no_json_files", parameters: nil)
            return
        }
        print("üìÅ –ù–∞–π–¥–µ–Ω—ã JSON-—Ñ–∞–π–ª—ã: \(jsonFiles.map { $0.lastPathComponent })")
        Analytics.logEvent("initial_data_setup_json_files_found", parameters: ["count": jsonFiles.count])
        
        var processedCombinations = Set<String>()
        let existingLanguages = fetchExistingLanguages(context: context)
        let existingCollections = fetchExistingCollections(context: context)
        var newLanguagesCount = 0
        var newCollectionsCount = 0
        var newCardsCount = 0
        var errorFiles = [String]()
        
        for fileURL in jsonFiles {
            let fileStartTime = Date()
            do {
                let data = try Data(contentsOf: fileURL)
                let decoder = JSONDecoder()
                
                // –ü—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ LanguageCourse
                do {
                    let course = try decoder.decode(LanguageCourse.self, from: data)
                    print("üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ \(fileURL.lastPathComponent) –∫–∞–∫ LanguageCourse")
                    
                    let combinationKey = "\(course.language)|\(course.name)"
                    if processedCombinations.contains(combinationKey) {
                        print("‚ÑπÔ∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ –¥—É–±–ª–∏—Ä—É—é—â–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è: \(course.name)")
                        Analytics.logEvent("initial_data_setup_skipped_duplicate_collection", parameters: ["collection": course.name, "language": course.language])
                        continue
                    }
                    processedCombinations.insert(combinationKey)
                    
                    if existingCollections.contains(where: { $0.name == course.name && $0.language?.name_language == course.language }) {
                        print("‚ÑπÔ∏è –ö–æ–ª–ª–µ–∫—Ü–∏—è \(course.name) —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                        Analytics.logEvent("initial_data_setup_skipped_existing_collection", parameters: ["collection": course.name, "language": course.language])
                        continue
                    }
                    
                    // –ù–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —è–∑—ã–∫
                    let language: ShopLanguages
                    if let foundLanguage = existingLanguages.first(where: { $0.name_language == course.language }) {
                        language = foundLanguage
                    } else {
                        language = ShopLanguages(context: context)
                        language.name_language = course.language
                        language.creationDate = Date()
                        language.priority = priorityForLanguage(course.language)
                        newLanguagesCount += 1
                        print("üåê –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —è–∑—ã–∫: \(course.language)")
                        Analytics.logEvent("initial_data_setup_new_language_created", parameters: ["language": course.language])
                    }
                    
                    // –°–æ–∑–¥–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º—ã
                    for theme in course.themes {
                        let collection = ShopCollection(context: context)
                        collection.name = theme.title
                        collection.creationDate = Date()
                        collection.priority = language.priority
                        collection.language = language
                        newCollectionsCount += 1
                        print("üìö –°–æ–∑–¥–∞–Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è: \(theme.title)")
                        
                        // –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏
                        for cardData in theme.cards {
                            let card = ShopCard(context: context)
                            card.frontText = cardData.front
                            card.backText = cardData.back
                            card.creationDate = Date()
                            card.collection = collection
                            card.language = course.language
                            card.collection_name = theme.title
                            newCardsCount += 1
                        }
                    }
                    
                    let fileDuration = Date().timeIntervalSince(fileStartTime)
                    Analytics.logEvent("initial_data_setup_file_processed", parameters: [
                        "file": fileURL.lastPathComponent,
                        "language": course.language,
                        "collection_count": course.themes.count,
                        "cards_count": course.themes.reduce(0) { $0 + $1.cards.count },
                        "duration_sec": fileDuration
                    ])
                } catch {
                    print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å \(fileURL.lastPathComponent) –∫–∞–∫ LanguageCourse: \(error)")
                    // –ü—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ CardModel
                    let cardModel = try decoder.decode(CardModel.self, from: data)
                    print("üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ \(fileURL.lastPathComponent) –∫–∞–∫ CardModel")
                    
                    let combinationKey = "\(cardModel.language)|\(cardModel.name)"
                    if processedCombinations.contains(combinationKey) {
                        print("‚ÑπÔ∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ –¥—É–±–ª–∏—Ä—É—é—â–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è: \(cardModel.name)")
                        Analytics.logEvent("initial_data_setup_skipped_duplicate_collection", parameters: ["collection": cardModel.name, "language": cardModel.language])
                        continue
                    }
                    processedCombinations.insert(combinationKey)
                    
                    if existingCollections.contains(where: { $0.name == cardModel.name && $0.language?.name_language == cardModel.language }) {
                        print("‚ÑπÔ∏è –ö–æ–ª–ª–µ–∫—Ü–∏—è \(cardModel.name) —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                        Analytics.logEvent("initial_data_setup_skipped_existing_collection", parameters: ["collection": cardModel.name, "language": cardModel.language])
                        continue
                    }
                    
                    // –ù–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —è–∑—ã–∫
                    let language: ShopLanguages
                    if let foundLanguage = existingLanguages.first(where: { $0.name_language == cardModel.language }) {
                        language = foundLanguage
                    } else {
                        language = ShopLanguages(context: context)
                        language.name_language = cardModel.language
                        language.creationDate = Date()
                        language.priority = priorityForLanguage(cardModel.language)
                        newLanguagesCount += 1
                        print("üåê –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —è–∑—ã–∫: \(cardModel.language)")
                        Analytics.logEvent("initial_data_setup_new_language_created", parameters: ["language": cardModel.language])
                    }
                    
                    // –°–æ–∑–¥–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é
                    let collection = ShopCollection(context: context)
                    collection.name = cardModel.name
                    collection.creationDate = Date()
                    collection.priority = language.priority
                    collection.language = language
                    newCollectionsCount += 1
                    print("üìö –°–æ–∑–¥–∞–Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è: \(cardModel.name)")
                    
                    // –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏
                    for cardData in cardModel.cards {
                        let card = ShopCard(context: context)
                        card.frontText = cardData.front
                        card.backText = cardData.back
                        card.creationDate = Date()
                        card.collection = collection
                        card.language = cardModel.language
                        card.collection_name = cardModel.name
                        newCardsCount += 1
                    }
                    
                    let fileDuration = Date().timeIntervalSince(fileStartTime)
                    Analytics.logEvent("initial_data_setup_file_processed", parameters: [
                        "file": fileURL.lastPathComponent,
                        "language": cardModel.language,
                        "collection": cardModel.name,
                        "cards_count": cardModel.cards.count,
                        "duration_sec": fileDuration
                    ])
                }
            } catch {
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ \(fileURL.lastPathComponent): \(error)")
                Analytics.logEvent("initial_data_setup_file_error", parameters: [
                    "file": fileURL.lastPathComponent,
                    "error_description": error.localizedDescription
                ])
                errorFiles.append(fileURL.lastPathComponent)
            }
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        do {
            try context.save()
            print("üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: \(newLanguagesCount) —è–∑—ã–∫–æ–≤, \(newCollectionsCount) –∫–æ–ª–ª–µ–∫—Ü–∏–π, \(newCardsCount) –∫–∞—Ä—Ç–æ—á–µ–∫")
            Analytics.logEvent("initial_data_setup_save_success", parameters: [
                "new_languages": newLanguagesCount,
                "new_collections": newCollectionsCount,
                "new_cards": newCardsCount
            ])
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: \(error)")
            Analytics.logEvent("initial_data_setup_save_error", parameters: ["error_description": error.localizedDescription])
        }
        
        // –û—Ç–ª–∞–¥–∫–∞: –≤—ã–≤–æ–¥ –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π
        let allCollections = fetchExistingCollections(context: context)
        print("üìã –í—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ Core Data (\(allCollections.count)):")
        for collection in allCollections {
            print("–ö–æ–ª–ª–µ–∫—Ü–∏—è: \(collection.name ?? "N/A"), –Ø–∑—ã–∫: \(collection.language?.name_language ?? "N/A"), –ö–∞—Ä—Ç–æ—á–µ–∫: \((collection.cards?.count ?? 0))")
        }
        
        let setupDuration = Date().timeIntervalSince(setupStartTime)
        Analytics.logEvent("initial_data_setup_complete", parameters: [
            "duration_sec": setupDuration,
            "new_languages": newLanguagesCount,
            "new_collections": newCollectionsCount,
            "new_cards": newCardsCount,
            "error_files_count": errorFiles.count
        ])
    }
    
    private static func fetchExistingLanguages(context: NSManagedObjectContext) -> [ShopLanguages] {
        let request: NSFetchRequest<ShopLanguages> = ShopLanguages.fetchRequest()
        do {
            let langs = try context.fetch(request)
            print("üåê –ù–∞–π–¥–µ–Ω–æ —è–∑—ã–∫–æ–≤: \(langs.count)")
            Analytics.logEvent("initial_data_setup_fetch_languages_success", parameters: ["count": langs.count])
            return langs
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —è–∑—ã–∫–æ–≤: \(error)")
            Analytics.logEvent("initial_data_setup_fetch_languages_error", parameters: ["error_description": error.localizedDescription])
            return []
        }
    }
    
    private static func fetchExistingCollections(context: NSManagedObjectContext) -> [ShopCollection] {
        let request: NSFetchRequest<ShopCollection> = ShopCollection.fetchRequest()
        do {
            let cols = try context.fetch(request)
            print("üìö –ù–∞–π–¥–µ–Ω–æ –∫–æ–ª–ª–µ–∫—Ü–∏–π: \(cols.count)")
            Analytics.logEvent("initial_data_setup_fetch_collections_success", parameters: ["count": cols.count])
            return cols
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π: \(error)")
            Analytics.logEvent("initial_data_setup_fetch_collections_error", parameters: ["error_description": error.localizedDescription])
            return []
        }
    }
    
    private static func priorityForLanguage(_ language: String) -> Int64 {
        switch language {
        case "Spanish": return 100
        case "French": return 95
        case "Japanese": return 90
        case "German": return 85
        case "Korean": return 80
        case "Italian": return 75
        case "Chinese": return 70
        case "Russian": return 65
        case "Arabic": return 60
        case "Portuguese": return 55
        case "English": return 50
        default: return 50
        }
    }
}

// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON
struct CardModel: Decodable {
    let language: String
    let name: String
    let cards: [CardData]
}


